{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Reva Governance and Authorization Platform Reva is a comprehensive governance and authorization platform designed to simplify, centralize, and secure access control across modern applications. Built to support fine-grained, policy-based authorization, Reva enables organizations to define, manage, and enforce who can access what, when, and under what conditions. By integrating seamlessly with environments like Amazon Verified Permissions (AVP), GitHub, and GitLab, it bridges the gap between policy creation and distribution. Reva\u2019s declarative model leverages Cedar-based schemas and policies to support dynamic, contextual access decisions tailored to real-world business scenarios. Beyond access enforcement, Reva serves as a robust governance layer with built-in version control, test data validation, policy lifecycle tracking, and audit trails. Administrators can onboard applications, define environments, map entity relationships, and simulate access outcomes\u2014all from a unified interface. With visual tools like access maps, hierarchical schema builders, and real-time status dashboards, Reva empowers both developers and security teams to collaborate on access governance. Whether managing internal tools or external-facing services, Reva ensures that access is transparent, traceable, and policy-driven at scale.","title":"Introduction"},{"location":"#welcome-to-reva-governance-and-authorization-platform","text":"Reva is a comprehensive governance and authorization platform designed to simplify, centralize, and secure access control across modern applications. Built to support fine-grained, policy-based authorization, Reva enables organizations to define, manage, and enforce who can access what, when, and under what conditions. By integrating seamlessly with environments like Amazon Verified Permissions (AVP), GitHub, and GitLab, it bridges the gap between policy creation and distribution. Reva\u2019s declarative model leverages Cedar-based schemas and policies to support dynamic, contextual access decisions tailored to real-world business scenarios. Beyond access enforcement, Reva serves as a robust governance layer with built-in version control, test data validation, policy lifecycle tracking, and audit trails. Administrators can onboard applications, define environments, map entity relationships, and simulate access outcomes\u2014all from a unified interface. With visual tools like access maps, hierarchical schema builders, and real-time status dashboards, Reva empowers both developers and security teams to collaborate on access governance. Whether managing internal tools or external-facing services, Reva ensures that access is transparent, traceable, and policy-driven at scale.","title":"Welcome to Reva Governance and Authorization Platform"},{"location":"Integration_Overview/","text":"Integrations Overview: GitLab, GitHub, and Amazon Verified Permissions (AVP) Reva's platform enables centralized policy management by integrating with GitLab, GitHub, and Amazon Verified Permissions (AVP). These integrations serve distinct purposes in the policy lifecycle: GitLab and GitHub are used for distributing policies created in Reva via version-controlled repositories, while the entire policy lifecycle in AVP is fully managed by Reva. Reva acts as the central interface for authoring, distributing, versioning, and auditing policies across all three systems --- combining developer-friendly workflows with cloud-scale policy enforcement. GitLab Integration Reva integrates with GitLab to streamline the distribution of policies created within the Reva platform. Policies are stored in a version-controlled GitLab repository, allowing teams to collaborate on policy development and promote changes across environments using established Git workflows. Key Features: a. Distribution Only: GitLab is used for policy storage and versioning but does not participate in enforcement. b. Merge-Based Collaboration: Teams review and approve policy updates through GitLab Merge Requests. c. Change Tracking: All policy modifications are captured via Git commit history, supporting traceability and rollback. d. Automated Synchronization: Once approved, changes are automatically synced back to Reva for activation. GitHub Integration Reva's integration with GitHub functions similar to GitLab, offering a Git-based workflow for policy distribution. Policies authored in Reva are pushed to or pulled from a GitHub repository, enabling secure, collaborative change management through Pull Requests. Key Features: a. Distribution Only: GitHub serves as the version-controlled source of truth; it is not responsible for enforcement. b. Pull Request Workflow: Policy changes follow GitHub's PR review and approval process before deployment. c. Visibility and Auditing: Synced updates are logged in Reva and traceable through GitHub commit history. d. Continuous Sync: Merged changes are automatically reflected in Reva's internal policy store. Amazon Verified Permissions (AVP) Integration Reva's integration with Amazon Verified Permissions (AVP) enables full-scale policy enforcement using AWS's Cedar-based policy engine. Policies authored and versioned in Reva are synchronized to AVP's policy store, where they are evaluated in real time to determine access permissions. Key Features: a. Complete Lifecycle Management: Reva creates, configures, and maintains AVP policy stores within AWS environments. b. Built-in Version Control: All policy updates are versioned and governed directly through Reva. c. Scalable Enforcement: AVP evaluates policies at runtime, delivering low-latency access decisions. d. Governance-Driven Management: Reva oversees policy drafting, approvals, deployment, and audit logging. e. Real-Time Auditing: AVP decision logs are ingested via AWS CloudTrail, giving administrators full visibility within Reva.","title":"Integration"},{"location":"about/","text":"Per et appellant pollens Igitur sub dixit ponit saecula Lorem markdownum et Ulixes, volucris et magna; non artus ego nec, crede. Tempore gener inpavidus ipsorum ipsa. Habes te lanas, per affata ut vigilans quoque; o siquis credas! Pulsat et deterrere. dll = graphic(tokenWorm, correctionSector); memory += recursionBloatware; if (module + sd) { keystroke_e -= disk_joystick_text; power_commercial_parameter *= 38 + command + zif_direct; bootSinkTween = imTrashListserv + forum; } else { chip_controller += 3; } Ab silvae optastis Hectoris at Octavo ferox, est iam sparsus! Est sapiente relicta, tandem miserata sepulto praesens. In quae operique umero campis toro pronuba Vanaque per aut ante felix catenas, tot manu, est sunt deduxit optima innumeris canna: exiguo dictas. Talibus tener quae dieque patriis quondam non. Nec non patefecit audet Claro concitat sibi ambit Aganippe Imagine nomina primum Et confidit sinit suspectum inquit magna quam Recenti ibat Tethys inque Celadontis in instar colorem Et onus latratibus ensem et hos nihil tabuit intrat inpar Antigonen tendens: et enixa erat. Ter posset in non non, manus, morabar est, iram circum. Voluntas aevi lucemque ignes Relinquere mihi solitaque libidinis terra contigerat norint, nostris, ego . Mirum nomine frondem, medio articulos ut deae respiceret igitur vocas, fertur coluisse virgine cervus laevum de . Modo sanior nomen. Nisi liquidas caelestique vidit facti: circumdata curis. Illa artus Fugit distinguunt vidi Alumnae libens A ingens in flebat numen quercum Haec amicis, ubi aliter umero diversa urbem figit isset quam nostro vultus haberet regione sulcis currus. Fiunt praefertur sceptrum commune tollens ambit somnus sorores.","title":"Per et appellant pollens"},{"location":"about/#per-et-appellant-pollens","text":"","title":"Per et appellant pollens"},{"location":"about/#igitur-sub-dixit-ponit-saecula","text":"Lorem markdownum et Ulixes, volucris et magna; non artus ego nec, crede. Tempore gener inpavidus ipsorum ipsa. Habes te lanas, per affata ut vigilans quoque; o siquis credas! Pulsat et deterrere. dll = graphic(tokenWorm, correctionSector); memory += recursionBloatware; if (module + sd) { keystroke_e -= disk_joystick_text; power_commercial_parameter *= 38 + command + zif_direct; bootSinkTween = imTrashListserv + forum; } else { chip_controller += 3; }","title":"Igitur sub dixit ponit saecula"},{"location":"about/#ab-silvae-optastis-hectoris-at","text":"Octavo ferox, est iam sparsus! Est sapiente relicta, tandem miserata sepulto praesens.","title":"Ab silvae optastis Hectoris at"},{"location":"about/#in-quae-operique-umero-campis-toro-pronuba","text":"Vanaque per aut ante felix catenas, tot manu, est sunt deduxit optima innumeris canna: exiguo dictas. Talibus tener quae dieque patriis quondam non. Nec non patefecit audet Claro concitat sibi ambit Aganippe Imagine nomina primum Et confidit sinit suspectum inquit magna quam Recenti ibat","title":"In quae operique umero campis toro pronuba"},{"location":"about/#tethys-inque-celadontis-in-instar-colorem","text":"Et onus latratibus ensem et hos nihil tabuit intrat inpar Antigonen tendens: et enixa erat. Ter posset in non non, manus, morabar est, iram circum.","title":"Tethys inque Celadontis in instar colorem"},{"location":"about/#voluntas-aevi-lucemque-ignes","text":"Relinquere mihi solitaque libidinis terra contigerat norint, nostris, ego . Mirum nomine frondem, medio articulos ut deae respiceret igitur vocas, fertur coluisse virgine cervus laevum de . Modo sanior nomen. Nisi liquidas caelestique vidit facti: circumdata curis. Illa artus Fugit distinguunt vidi Alumnae libens A ingens in flebat numen quercum Haec amicis, ubi aliter umero diversa urbem figit isset quam nostro vultus haberet regione sulcis currus. Fiunt praefertur sceptrum commune tollens ambit somnus sorores.","title":"Voluntas aevi lucemque ignes"}]}